// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

// This file corresponds to an ERC20 token we wrote called the ReserveDollar. The source for
// the ReserveDollar is not in the repo. The only reason it is mentioned here is that
// the ReserveRights token copies balances over from previous addresses, and this was an easy
// way to quickly deploy an ERC20 token to make sure those balance copies did not revert.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ReserveDollarABI is the input ABI used to generate the binding from.
const ReserveDollarABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"changeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEternalStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFreezer\",\"type\":\"address\"}],\"name\":\"FreezerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wiped\",\"type\":\"address\"}],\"name\":\"Wiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]"

// ReserveDollarBin is the compiled bytecode used for deploying new contracts.
const ReserveDollarBin = ``

// DeployReserveDollar deploys a new Ethereum contract, binding an instance of ReserveDollar to it.
func DeployReserveDollar(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveDollar, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveDollarBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveDollar{ReserveDollarCaller: ReserveDollarCaller{contract: contract}, ReserveDollarTransactor: ReserveDollarTransactor{contract: contract}, ReserveDollarFilterer: ReserveDollarFilterer{contract: contract}}, nil
}

// ReserveDollar is an auto generated Go binding around an Ethereum contract.
type ReserveDollar struct {
	ReserveDollarCaller     // Read-only binding to the contract
	ReserveDollarTransactor // Write-only binding to the contract
	ReserveDollarFilterer   // Log filterer for contract events
}

// ReserveDollarCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveDollarCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveDollarTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveDollarFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveDollarSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveDollarSession struct {
	Contract     *ReserveDollar    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReserveDollarCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveDollarCallerSession struct {
	Contract *ReserveDollarCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ReserveDollarTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveDollarTransactorSession struct {
	Contract     *ReserveDollarTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ReserveDollarRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveDollarRaw struct {
	Contract *ReserveDollar // Generic contract binding to access the raw methods on
}

// ReserveDollarCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveDollarCallerRaw struct {
	Contract *ReserveDollarCaller // Generic read-only contract binding to access the raw methods on
}

// ReserveDollarTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveDollarTransactorRaw struct {
	Contract *ReserveDollarTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveDollar creates a new instance of ReserveDollar, bound to a specific deployed contract.
func NewReserveDollar(address common.Address, backend bind.ContractBackend) (*ReserveDollar, error) {
	contract, err := bindReserveDollar(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveDollar{ReserveDollarCaller: ReserveDollarCaller{contract: contract}, ReserveDollarTransactor: ReserveDollarTransactor{contract: contract}, ReserveDollarFilterer: ReserveDollarFilterer{contract: contract}}, nil
}

// NewReserveDollarCaller creates a new read-only instance of ReserveDollar, bound to a specific deployed contract.
func NewReserveDollarCaller(address common.Address, caller bind.ContractCaller) (*ReserveDollarCaller, error) {
	contract, err := bindReserveDollar(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarCaller{contract: contract}, nil
}

// NewReserveDollarTransactor creates a new write-only instance of ReserveDollar, bound to a specific deployed contract.
func NewReserveDollarTransactor(address common.Address, transactor bind.ContractTransactor) (*ReserveDollarTransactor, error) {
	contract, err := bindReserveDollar(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarTransactor{contract: contract}, nil
}

// NewReserveDollarFilterer creates a new log filterer instance of ReserveDollar, bound to a specific deployed contract.
func NewReserveDollarFilterer(address common.Address, filterer bind.ContractFilterer) (*ReserveDollarFilterer, error) {
	contract, err := bindReserveDollar(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarFilterer{contract: contract}, nil
}

// bindReserveDollar binds a generic wrapper to an already deployed contract.
func bindReserveDollar(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveDollarABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollar *ReserveDollarRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollar.Contract.ReserveDollarCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollar *ReserveDollarRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ReserveDollarTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollar *ReserveDollarRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ReserveDollarTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveDollar *ReserveDollarCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ReserveDollar.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveDollar *ReserveDollarTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveDollar *ReserveDollarTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveDollar.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollar *ReserveDollarCaller) Allowance(opts *bind.CallOpts, holder common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "allowance", holder, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollar *ReserveDollarSession) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollar.Contract.Allowance(&_ReserveDollar.CallOpts, holder, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address holder, address spender) constant returns(uint256)
func (_ReserveDollar *ReserveDollarCallerSession) Allowance(holder common.Address, spender common.Address) (*big.Int, error) {
	return _ReserveDollar.Contract.Allowance(&_ReserveDollar.CallOpts, holder, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollar *ReserveDollarCaller) BalanceOf(opts *bind.CallOpts, holder common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "balanceOf", holder)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollar *ReserveDollarSession) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollar.Contract.BalanceOf(&_ReserveDollar.CallOpts, holder)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address holder) constant returns(uint256)
func (_ReserveDollar *ReserveDollarCallerSession) BalanceOf(holder common.Address) (*big.Int, error) {
	return _ReserveDollar.Contract.BalanceOf(&_ReserveDollar.CallOpts, holder)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollar *ReserveDollarCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollar *ReserveDollarSession) Decimals() (uint8, error) {
	return _ReserveDollar.Contract.Decimals(&_ReserveDollar.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_ReserveDollar *ReserveDollarCallerSession) Decimals() (uint8, error) {
	return _ReserveDollar.Contract.Decimals(&_ReserveDollar.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) Freezer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "freezer")
	return *ret0, err
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) Freezer() (common.Address, error) {
	return _ReserveDollar.Contract.Freezer(&_ReserveDollar.CallOpts)
}

// Freezer is a free data retrieval call binding the contract method 0x92716054.
//
// Solidity: function freezer() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) Freezer() (common.Address, error) {
	return _ReserveDollar.Contract.Freezer(&_ReserveDollar.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) GetEternalStorageAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "getEternalStorageAddress")
	return *ret0, err
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollar.Contract.GetEternalStorageAddress(&_ReserveDollar.CallOpts)
}

// GetEternalStorageAddress is a free data retrieval call binding the contract method 0xfb568966.
//
// Solidity: function getEternalStorageAddress() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) GetEternalStorageAddress() (common.Address, error) {
	return _ReserveDollar.Contract.GetEternalStorageAddress(&_ReserveDollar.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "minter")
	return *ret0, err
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) Minter() (common.Address, error) {
	return _ReserveDollar.Contract.Minter(&_ReserveDollar.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) Minter() (common.Address, error) {
	return _ReserveDollar.Contract.Minter(&_ReserveDollar.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollar *ReserveDollarCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollar *ReserveDollarSession) Name() (string, error) {
	return _ReserveDollar.Contract.Name(&_ReserveDollar.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_ReserveDollar *ReserveDollarCallerSession) Name() (string, error) {
	return _ReserveDollar.Contract.Name(&_ReserveDollar.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) NominatedOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "nominatedOwner")
	return *ret0, err
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) NominatedOwner() (common.Address, error) {
	return _ReserveDollar.Contract.NominatedOwner(&_ReserveDollar.CallOpts)
}

// NominatedOwner is a free data retrieval call binding the contract method 0x53a47bb7.
//
// Solidity: function nominatedOwner() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) NominatedOwner() (common.Address, error) {
	return _ReserveDollar.Contract.NominatedOwner(&_ReserveDollar.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) Owner() (common.Address, error) {
	return _ReserveDollar.Contract.Owner(&_ReserveDollar.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) Owner() (common.Address, error) {
	return _ReserveDollar.Contract.Owner(&_ReserveDollar.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollar *ReserveDollarCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollar *ReserveDollarSession) Paused() (bool, error) {
	return _ReserveDollar.Contract.Paused(&_ReserveDollar.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ReserveDollar *ReserveDollarCallerSession) Paused() (bool, error) {
	return _ReserveDollar.Contract.Paused(&_ReserveDollar.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollar *ReserveDollarCaller) Pauser(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "pauser")
	return *ret0, err
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollar *ReserveDollarSession) Pauser() (common.Address, error) {
	return _ReserveDollar.Contract.Pauser(&_ReserveDollar.CallOpts)
}

// Pauser is a free data retrieval call binding the contract method 0x9fd0506d.
//
// Solidity: function pauser() constant returns(address)
func (_ReserveDollar *ReserveDollarCallerSession) Pauser() (common.Address, error) {
	return _ReserveDollar.Contract.Pauser(&_ReserveDollar.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollar *ReserveDollarCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollar *ReserveDollarSession) Symbol() (string, error) {
	return _ReserveDollar.Contract.Symbol(&_ReserveDollar.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_ReserveDollar *ReserveDollarCallerSession) Symbol() (string, error) {
	return _ReserveDollar.Contract.Symbol(&_ReserveDollar.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollar *ReserveDollarCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ReserveDollar.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollar *ReserveDollarSession) TotalSupply() (*big.Int, error) {
	return _ReserveDollar.Contract.TotalSupply(&_ReserveDollar.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ReserveDollar *ReserveDollarCallerSession) TotalSupply() (*big.Int, error) {
	return _ReserveDollar.Contract.TotalSupply(&_ReserveDollar.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollar *ReserveDollarTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollar *ReserveDollarSession) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollar.Contract.AcceptOwnership(&_ReserveDollar.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_ReserveDollar *ReserveDollarTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ReserveDollar.Contract.AcceptOwnership(&_ReserveDollar.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Approve(&_ReserveDollar.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Approve(&_ReserveDollar.TransactOpts, spender, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.BurnFrom(&_ReserveDollar.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.BurnFrom(&_ReserveDollar.TransactOpts, account, value)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollar *ReserveDollarTransactor) ChangeFreezer(opts *bind.TransactOpts, newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "changeFreezer", newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollar *ReserveDollarSession) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeFreezer(&_ReserveDollar.TransactOpts, newFreezer)
}

// ChangeFreezer is a paid mutator transaction binding the contract method 0x6960d024.
//
// Solidity: function changeFreezer(address newFreezer) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) ChangeFreezer(newFreezer common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeFreezer(&_ReserveDollar.TransactOpts, newFreezer)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollar *ReserveDollarTransactor) ChangeMinter(opts *bind.TransactOpts, newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "changeMinter", newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollar *ReserveDollarSession) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeMinter(&_ReserveDollar.TransactOpts, newMinter)
}

// ChangeMinter is a paid mutator transaction binding the contract method 0x2c4d4d18.
//
// Solidity: function changeMinter(address newMinter) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) ChangeMinter(newMinter common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeMinter(&_ReserveDollar.TransactOpts, newMinter)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollar *ReserveDollarTransactor) ChangeName(opts *bind.TransactOpts, newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "changeName", newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollar *ReserveDollarSession) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeName(&_ReserveDollar.TransactOpts, newName, newSymbol)
}

// ChangeName is a paid mutator transaction binding the contract method 0x86575e40.
//
// Solidity: function changeName(string newName, string newSymbol) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) ChangeName(newName string, newSymbol string) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangeName(&_ReserveDollar.TransactOpts, newName, newSymbol)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollar *ReserveDollarTransactor) ChangePauser(opts *bind.TransactOpts, newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "changePauser", newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollar *ReserveDollarSession) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangePauser(&_ReserveDollar.TransactOpts, newPauser)
}

// ChangePauser is a paid mutator transaction binding the contract method 0x2cd271e7.
//
// Solidity: function changePauser(address newPauser) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) ChangePauser(newPauser common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.ChangePauser(&_ReserveDollar.TransactOpts, newPauser)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollar *ReserveDollarTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollar *ReserveDollarSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.DecreaseAllowance(&_ReserveDollar.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ReserveDollar *ReserveDollarTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.DecreaseAllowance(&_ReserveDollar.TransactOpts, spender, subtractedValue)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollar *ReserveDollarTransactor) Freeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "freeze", account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollar *ReserveDollarSession) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Freeze(&_ReserveDollar.TransactOpts, account)
}

// Freeze is a paid mutator transaction binding the contract method 0x8d1fdf2f.
//
// Solidity: function freeze(address account) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Freeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Freeze(&_ReserveDollar.TransactOpts, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollar *ReserveDollarTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollar *ReserveDollarSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.IncreaseAllowance(&_ReserveDollar.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ReserveDollar *ReserveDollarTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.IncreaseAllowance(&_ReserveDollar.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarTransactor) Mint(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "mint", account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarSession) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Mint(&_ReserveDollar.TransactOpts, account, value)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 value) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Mint(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Mint(&_ReserveDollar.TransactOpts, account, value)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollar *ReserveDollarTransactor) NominateNewOwner(opts *bind.TransactOpts, nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "nominateNewOwner", nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollar *ReserveDollarSession) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.NominateNewOwner(&_ReserveDollar.TransactOpts, nominee)
}

// NominateNewOwner is a paid mutator transaction binding the contract method 0x1627540c.
//
// Solidity: function nominateNewOwner(address nominee) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) NominateNewOwner(nominee common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.NominateNewOwner(&_ReserveDollar.TransactOpts, nominee)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollar *ReserveDollarTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollar *ReserveDollarSession) Pause() (*types.Transaction, error) {
	return _ReserveDollar.Contract.Pause(&_ReserveDollar.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Pause() (*types.Transaction, error) {
	return _ReserveDollar.Contract.Pause(&_ReserveDollar.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollar *ReserveDollarTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollar *ReserveDollarSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollar.Contract.RenounceOwnership(&_ReserveDollar.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReserveDollar *ReserveDollarTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReserveDollar.Contract.RenounceOwnership(&_ReserveDollar.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Transfer(&_ReserveDollar.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Transfer(&_ReserveDollar.TransactOpts, to, value)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollar *ReserveDollarTransactor) TransferEternalStorage(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "transferEternalStorage", newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollar *ReserveDollarSession) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.TransferEternalStorage(&_ReserveDollar.TransactOpts, newOwner)
}

// TransferEternalStorage is a paid mutator transaction binding the contract method 0x96cd5536.
//
// Solidity: function transferEternalStorage(address newOwner) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) TransferEternalStorage(newOwner common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.TransferEternalStorage(&_ReserveDollar.TransactOpts, newOwner)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.TransferFrom(&_ReserveDollar.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ReserveDollar *ReserveDollarTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ReserveDollar.Contract.TransferFrom(&_ReserveDollar.TransactOpts, from, to, value)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollar *ReserveDollarTransactor) Unfreeze(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "unfreeze", account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollar *ReserveDollarSession) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Unfreeze(&_ReserveDollar.TransactOpts, account)
}

// Unfreeze is a paid mutator transaction binding the contract method 0x45c8b1a6.
//
// Solidity: function unfreeze(address account) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Unfreeze(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Unfreeze(&_ReserveDollar.TransactOpts, account)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollar *ReserveDollarTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollar *ReserveDollarSession) Unpause() (*types.Transaction, error) {
	return _ReserveDollar.Contract.Unpause(&_ReserveDollar.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Unpause() (*types.Transaction, error) {
	return _ReserveDollar.Contract.Unpause(&_ReserveDollar.TransactOpts)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollar *ReserveDollarTransactor) Wipe(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.contract.Transact(opts, "wipe", account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollar *ReserveDollarSession) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Wipe(&_ReserveDollar.TransactOpts, account)
}

// Wipe is a paid mutator transaction binding the contract method 0x988749d1.
//
// Solidity: function wipe(address account) returns()
func (_ReserveDollar *ReserveDollarTransactorSession) Wipe(account common.Address) (*types.Transaction, error) {
	return _ReserveDollar.Contract.Wipe(&_ReserveDollar.TransactOpts, account)
}

// ReserveDollarApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ReserveDollar contract.
type ReserveDollarApprovalIterator struct {
	Event *ReserveDollarApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarApproval represents a Approval event raised by the ReserveDollar contract.
type ReserveDollarApproval struct {
	Holder  common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollar *ReserveDollarFilterer) FilterApproval(opts *bind.FilterOpts, holder []common.Address, spender []common.Address) (*ReserveDollarApprovalIterator, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarApprovalIterator{contract: _ReserveDollar.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed holder, address indexed spender, uint256 value)
func (_ReserveDollar *ReserveDollarFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ReserveDollarApproval, holder []common.Address, spender []common.Address) (event.Subscription, error) {

	var holderRule []interface{}
	for _, holderItem := range holder {
		holderRule = append(holderRule, holderItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Approval", holderRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarApproval)
				if err := _ReserveDollar.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarFreezerChangedIterator is returned from FilterFreezerChanged and is used to iterate over the raw logs and unpacked data for FreezerChanged events raised by the ReserveDollar contract.
type ReserveDollarFreezerChangedIterator struct {
	Event *ReserveDollarFreezerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarFreezerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarFreezerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarFreezerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarFreezerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarFreezerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarFreezerChanged represents a FreezerChanged event raised by the ReserveDollar contract.
type ReserveDollarFreezerChanged struct {
	NewFreezer common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFreezerChanged is a free log retrieval operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollar *ReserveDollarFilterer) FilterFreezerChanged(opts *bind.FilterOpts, newFreezer []common.Address) (*ReserveDollarFreezerChangedIterator, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarFreezerChangedIterator{contract: _ReserveDollar.contract, event: "FreezerChanged", logs: logs, sub: sub}, nil
}

// WatchFreezerChanged is a free log subscription operation binding the contract event 0x97feb20f655745f67bbd05465394b86626eaafbbaae4a509a838c19237ea9da3.
//
// Solidity: event FreezerChanged(address indexed newFreezer)
func (_ReserveDollar *ReserveDollarFilterer) WatchFreezerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarFreezerChanged, newFreezer []common.Address) (event.Subscription, error) {

	var newFreezerRule []interface{}
	for _, newFreezerItem := range newFreezer {
		newFreezerRule = append(newFreezerRule, newFreezerItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "FreezerChanged", newFreezerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarFreezerChanged)
				if err := _ReserveDollar.contract.UnpackLog(event, "FreezerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarFrozenIterator is returned from FilterFrozen and is used to iterate over the raw logs and unpacked data for Frozen events raised by the ReserveDollar contract.
type ReserveDollarFrozenIterator struct {
	Event *ReserveDollarFrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarFrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarFrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarFrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarFrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarFrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarFrozen represents a Frozen event raised by the ReserveDollar contract.
type ReserveDollarFrozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFrozen is a free log retrieval operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) FilterFrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarFrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarFrozenIterator{contract: _ReserveDollar.contract, event: "Frozen", logs: logs, sub: sub}, nil
}

// WatchFrozen is a free log subscription operation binding the contract event 0xf0906ec3b3af5007c736f1174c73ff022e930e45637fbdbc797f05ea613474de.
//
// Solidity: event Frozen(address indexed freezer, address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) WatchFrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarFrozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Frozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarFrozen)
				if err := _ReserveDollar.contract.UnpackLog(event, "Frozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarMinterChangedIterator is returned from FilterMinterChanged and is used to iterate over the raw logs and unpacked data for MinterChanged events raised by the ReserveDollar contract.
type ReserveDollarMinterChangedIterator struct {
	Event *ReserveDollarMinterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarMinterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarMinterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarMinterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarMinterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarMinterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarMinterChanged represents a MinterChanged event raised by the ReserveDollar contract.
type ReserveDollarMinterChanged struct {
	NewMinter common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinterChanged is a free log retrieval operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollar *ReserveDollarFilterer) FilterMinterChanged(opts *bind.FilterOpts, newMinter []common.Address) (*ReserveDollarMinterChangedIterator, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarMinterChangedIterator{contract: _ReserveDollar.contract, event: "MinterChanged", logs: logs, sub: sub}, nil
}

// WatchMinterChanged is a free log subscription operation binding the contract event 0xb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a425.
//
// Solidity: event MinterChanged(address indexed newMinter)
func (_ReserveDollar *ReserveDollarFilterer) WatchMinterChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarMinterChanged, newMinter []common.Address) (event.Subscription, error) {

	var newMinterRule []interface{}
	for _, newMinterItem := range newMinter {
		newMinterRule = append(newMinterRule, newMinterItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "MinterChanged", newMinterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarMinterChanged)
				if err := _ReserveDollar.contract.UnpackLog(event, "MinterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarNameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the ReserveDollar contract.
type ReserveDollarNameChangedIterator struct {
	Event *ReserveDollarNameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarNameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarNameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarNameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarNameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarNameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarNameChanged represents a NameChanged event raised by the ReserveDollar contract.
type ReserveDollarNameChanged struct {
	NewName   string
	NewSymbol string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollar *ReserveDollarFilterer) FilterNameChanged(opts *bind.FilterOpts) (*ReserveDollarNameChangedIterator, error) {

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return &ReserveDollarNameChangedIterator{contract: _ReserveDollar.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a.
//
// Solidity: event NameChanged(string newName, string newSymbol)
func (_ReserveDollar *ReserveDollarFilterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarNameChanged) (event.Subscription, error) {

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "NameChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarNameChanged)
				if err := _ReserveDollar.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarOwnerChangedIterator is returned from FilterOwnerChanged and is used to iterate over the raw logs and unpacked data for OwnerChanged events raised by the ReserveDollar contract.
type ReserveDollarOwnerChangedIterator struct {
	Event *ReserveDollarOwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarOwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarOwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarOwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarOwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarOwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarOwnerChanged represents a OwnerChanged event raised by the ReserveDollar contract.
type ReserveDollarOwnerChanged struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerChanged is a free log retrieval operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollar *ReserveDollarFilterer) FilterOwnerChanged(opts *bind.FilterOpts, newOwner []common.Address) (*ReserveDollarOwnerChangedIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarOwnerChangedIterator{contract: _ReserveDollar.contract, event: "OwnerChanged", logs: logs, sub: sub}, nil
}

// WatchOwnerChanged is a free log subscription operation binding the contract event 0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36.
//
// Solidity: event OwnerChanged(address indexed newOwner)
func (_ReserveDollar *ReserveDollarFilterer) WatchOwnerChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarOwnerChanged, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "OwnerChanged", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarOwnerChanged)
				if err := _ReserveDollar.contract.UnpackLog(event, "OwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ReserveDollar contract.
type ReserveDollarPausedIterator struct {
	Event *ReserveDollarPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarPaused represents a Paused event raised by the ReserveDollar contract.
type ReserveDollarPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarPausedIterator{contract: _ReserveDollar.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarPaused)
				if err := _ReserveDollar.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarPauserChangedIterator is returned from FilterPauserChanged and is used to iterate over the raw logs and unpacked data for PauserChanged events raised by the ReserveDollar contract.
type ReserveDollarPauserChangedIterator struct {
	Event *ReserveDollarPauserChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarPauserChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarPauserChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarPauserChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarPauserChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarPauserChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarPauserChanged represents a PauserChanged event raised by the ReserveDollar contract.
type ReserveDollarPauserChanged struct {
	NewPauser common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPauserChanged is a free log retrieval operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollar *ReserveDollarFilterer) FilterPauserChanged(opts *bind.FilterOpts, newPauser []common.Address) (*ReserveDollarPauserChangedIterator, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarPauserChangedIterator{contract: _ReserveDollar.contract, event: "PauserChanged", logs: logs, sub: sub}, nil
}

// WatchPauserChanged is a free log subscription operation binding the contract event 0xb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604.
//
// Solidity: event PauserChanged(address indexed newPauser)
func (_ReserveDollar *ReserveDollarFilterer) WatchPauserChanged(opts *bind.WatchOpts, sink chan<- *ReserveDollarPauserChanged, newPauser []common.Address) (event.Subscription, error) {

	var newPauserRule []interface{}
	for _, newPauserItem := range newPauser {
		newPauserRule = append(newPauserRule, newPauserItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "PauserChanged", newPauserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarPauserChanged)
				if err := _ReserveDollar.contract.UnpackLog(event, "PauserChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ReserveDollar contract.
type ReserveDollarTransferIterator struct {
	Event *ReserveDollarTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarTransfer represents a Transfer event raised by the ReserveDollar contract.
type ReserveDollarTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollar *ReserveDollarFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ReserveDollarTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarTransferIterator{contract: _ReserveDollar.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ReserveDollar *ReserveDollarFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ReserveDollarTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarTransfer)
				if err := _ReserveDollar.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarUnfrozenIterator is returned from FilterUnfrozen and is used to iterate over the raw logs and unpacked data for Unfrozen events raised by the ReserveDollar contract.
type ReserveDollarUnfrozenIterator struct {
	Event *ReserveDollarUnfrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarUnfrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarUnfrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarUnfrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarUnfrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarUnfrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarUnfrozen represents a Unfrozen event raised by the ReserveDollar contract.
type ReserveDollarUnfrozen struct {
	Freezer common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnfrozen is a free log retrieval operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) FilterUnfrozen(opts *bind.FilterOpts, freezer []common.Address, account []common.Address) (*ReserveDollarUnfrozenIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarUnfrozenIterator{contract: _ReserveDollar.contract, event: "Unfrozen", logs: logs, sub: sub}, nil
}

// WatchUnfrozen is a free log subscription operation binding the contract event 0x295f47d48ca3de5c5214af57c89859243090803a47bbca8a4bbe6231a77067b4.
//
// Solidity: event Unfrozen(address indexed freezer, address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) WatchUnfrozen(opts *bind.WatchOpts, sink chan<- *ReserveDollarUnfrozen, freezer []common.Address, account []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Unfrozen", freezerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarUnfrozen)
				if err := _ReserveDollar.contract.UnpackLog(event, "Unfrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ReserveDollar contract.
type ReserveDollarUnpausedIterator struct {
	Event *ReserveDollarUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarUnpaused represents a Unpaused event raised by the ReserveDollar contract.
type ReserveDollarUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ReserveDollarUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarUnpausedIterator{contract: _ReserveDollar.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address indexed account)
func (_ReserveDollar *ReserveDollarFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ReserveDollarUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarUnpaused)
				if err := _ReserveDollar.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ReserveDollarWipedIterator is returned from FilterWiped and is used to iterate over the raw logs and unpacked data for Wiped events raised by the ReserveDollar contract.
type ReserveDollarWipedIterator struct {
	Event *ReserveDollarWiped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveDollarWipedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveDollarWiped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveDollarWiped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveDollarWipedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveDollarWipedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveDollarWiped represents a Wiped event raised by the ReserveDollar contract.
type ReserveDollarWiped struct {
	Freezer common.Address
	Wiped   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWiped is a free log retrieval operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollar *ReserveDollarFilterer) FilterWiped(opts *bind.FilterOpts, freezer []common.Address, wiped []common.Address) (*ReserveDollarWipedIterator, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollar.contract.FilterLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return &ReserveDollarWipedIterator{contract: _ReserveDollar.contract, event: "Wiped", logs: logs, sub: sub}, nil
}

// WatchWiped is a free log subscription operation binding the contract event 0xaa7ccaa635252f24fc5a4665e7c4a8af5aa588c2e60d326c1196a0e4d2d59f2c.
//
// Solidity: event Wiped(address indexed freezer, address indexed wiped)
func (_ReserveDollar *ReserveDollarFilterer) WatchWiped(opts *bind.WatchOpts, sink chan<- *ReserveDollarWiped, freezer []common.Address, wiped []common.Address) (event.Subscription, error) {

	var freezerRule []interface{}
	for _, freezerItem := range freezer {
		freezerRule = append(freezerRule, freezerItem)
	}
	var wipedRule []interface{}
	for _, wipedItem := range wiped {
		wipedRule = append(wipedRule, wipedItem)
	}

	logs, sub, err := _ReserveDollar.contract.WatchLogs(opts, "Wiped", freezerRule, wipedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveDollarWiped)
				if err := _ReserveDollar.contract.UnpackLog(event, "Wiped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
